
-- CRIANDO BANCO DE DADOS E TABELAS -- UNIDADE 6 -- DDL --

create database BD_RH

USE BD_RH

CREATE TABLE CARGO
(COD_CARGO     tinyint      not null,
NOM_CARGO      varchar(50)   not null,
VAL_SALARIO_BASE    Money         null)

ALTER TABLE CARGO ADD PRIMARY KEY (COD_CARGO)

CREATE TABLE FUNCIONARIO
(COD_FUNC      tinyint     not null,
NOM_FUNC       varchar(50)   not null,
VAL_SALARIO     Money           null,
COD_CARGO      tinyint      null,
COD_FORMAÇÃO    tinyint       null)

ALTER TABLE FUNCIONARIO ADD PRIMARY KEY (COD_FUNC)
ALTER TABLE FUNCIONARIO ADD FOREIGN KEY (COD_CARGO) REFERENCES CARGO (COD_CARGO)
ALTER TABLE FUNCIONARIO ADD FOREIGN KEY (COD_FORMAÇÃO) REFERENCES FORMAÇÃO_ESCOLAR (COD_FORMAÇÃO)

CREATE TABLE PROJETO
(COD_PROJETO     tinyint      not null,
NOM_PROJETO      varchar(50)   not null,
DTA_INICIO       datetime       null,
DTA_FIM          datetime        null)

ALTER TABLE PROJETO ADD PRIMARY KEY (COD_PROJETO)

CREATE TABLE ENGENHEIRO
(COD_FUNC     tinyint         not null,
DES_CREA      varchar(50)     not null)

ALTER TABLE ENGENHEIRO ADD PRIMARY KEY (COD_FUNC)
ALTER TABLE ENGENHEIRO ADD FOREIGN KEY (COD_FUNC) REFERENCES FUNCIONARIO (COD_FUNC)

CREATE TABLE FORMAÇÃO_ESCOLAR
(COD_FORMAÇÃO    tinyint      not null,
NOM_FORMAÇÃO     varchar(50)        not null)

ALTER TABLE FORMAÇÃO_ESCOLAR ADD PRIMARY KEY (COD_FORMAÇÃO)

CREATE TABLE TRABALHA_EM
(COD_FUNC      tinyint       not null,
COD_PROJETO     tinyint      not null,
NUM_TOTAL_HORAS     decimal(7,1)     null)

ALTER TABLE TRABALHA_EM ADD PRIMARY KEY (COD_FUNC,COD_PROJETO)
ALTER TABLE TRABALHA_EM ADD FOREIGN KEY (COD_FUNC) REFERENCES FUNCIONARIO (COD_FUNC)
ALTER TABLE TRABALHA_EM ADD FOREIGN KEY (COD_PROJETO) REFERENCES PROJETO (COD_PROJETO)


-- NOVOS COMANDOS PARA BD -- UNIDADE 7 -- DML --

SET DATEFORMAT DMY

-- INSERINDO AS LINHAS -- PREENCHENDO AS TABELAS --


-- TABELA CARGO --

INSERT INTO CARGO (COD_CARGO,NOM_CARGO,VAL_SALARIO_BASE) VALUES ( 1,'DESENVOLVEDOR',2000.00);
INSERT INTO CARGO VALUES (2,'PROGRAMADOR',1800.00);
INSERT INTO CARGO VALUES (3,'PROGRAMADOR', 2000.00);
INSERT INTO CARGO VALUES (4,'DESENVOLVERDOR_WEB',1850.00);
INSERT INTO CARGO VALUES (5,'ADMINISTRADOR_BD', 2050.00);
INSERT INTO CARGO VALUES (6,'DEV_FRONT_END',1800.00);
INSERT INTO CARGO VALUES (7,'DEV_BACK_END', 2400.00);

-- TABELA FORMAÇÃO_ESCOLAR --

INSERT INTO FORMAÇÃO_ESCOLAR VALUES (1, 'CIENCIA DA COMPUTAÇÃO');
INSERT INTO FORMAÇÃO_ESCOLAR VALUES (2, 'ENGENHARIA DA COMPUTAÇÃO');
INSERT INTO FORMAÇÃO_ESCOLAR VALUES (3, 'ANALISE E DESENVOLVIMENTO DE SISTEMAS');
INSERT INTO FORMAÇÃO_ESCOLAR VALUES (4, 'DESENVOLVIMENTO WEB');
INSERT INTO FORMAÇÃO_ESCOLAR VALUES (5, 'CIENCIA DA COMPUTAÇÃO');
INSERT INTO FORMAÇÃO_ESCOLAR VALUES (6, 'ENGENHARIA DA COMPUTAÇÃO');
INSERT INTO FORMAÇÃO_ESCOLAR VALUES (7, 'CIENCIA DA COMPUTAÇÃO');

-- TABELA PROJETO --

INSERT INTO PROJETO VALUES (1,'APP_WeCare','01/06/2019','01/06/2022');
INSERT INTO PROJETO VALUES (2,'APP_WeCare',01/06/2019,01/06/2022); -- DESSA FORMA DA ERRO!! --
INSERT INTO PROJETO VALUES (3,'APP_NETFLIX','01/05/2019','01/06/2023');
INSERT INTO PROJETO VALUES (4,'APP_WeCare','05/02/2018','01/05/2022');
INSERT INTO PROJETO VALUES (5,'APP_WeCare','01/10/2019','01/08/2022');
INSERT INTO PROJETO VALUES (6,'APP_WeCare','01/06/2019','01/07/2022');
INSERT INTO PROJETO VALUES (7,'APP_WeCare','01/02/2019','01/03/2022');
INSERT INTO PROJETO VALUES (8,'EX DELETE',08/12/2000,08/12/2020);

-- TABELA FUNCIONARIO --
INSERT INTO FUNCIONARIO VALUES (1,'DANIEL',2000.00,1,1);
INSERT INTO FUNCIONARIO VALUES (2,'CRIS',2500.00,2,2);
INSERT INTO FUNCIONARIO VALUES (3,'AMADEU',2050.00,3,3);
INSERT INTO FUNCIONARIO VALUES (4,'PAULO',1500.00,4,4);
INSERT INTO FUNCIONARIO VALUES (5,'NICOLE',1800.00,5,5);
INSERT INTO FUNCIONARIO VALUES (6,'DOUGLAS',2100.00,6,6);
INSERT INTO FUNCIONARIO VALUES (7,'BARBARA',1300.00,7,7);

-- TABELA TRABALHA_EM--

INSERT INTO TRABALHA_EM VALUES (1,1,7);
INSERT INTO TRABALHA_EM VALUES (2,2,10);
INSERT INTO TRABALHA_EM VALUES (3,3,11);
INSERT INTO TRABALHA_EM VALUES (4,4,3);
INSERT INTO TRABALHA_EM VALUES (5,5,7);
INSERT INTO TRABALHA_EM VALUES (6,6,8);
INSERT INTO TRABALHA_EM VALUES (7,7,6);

-- TABELA ENGENHEIRO --

INSERT INTO ENGENHEIRO VALUES ( 1, 'PENDENTE');
INSERT INTO ENGENHEIRO VALUES ( 2, 'PENDENTE');
INSERT INTO ENGENHEIRO VALUES ( 3, 'COMPLETO');
INSERT INTO ENGENHEIRO VALUES ( 4, 'PENDENTE');
INSERT INTO ENGENHEIRO VALUES ( 5, 'COMPLETO');
INSERT INTO ENGENHEIRO VALUES ( 6, 'COMPLETO');
INSERT INTO ENGENHEIRO VALUES ( 7, 'PENDENTE');

-- ABRINDO TABELA --

SELECT * FROM ENGENHEIRO
SELECT * FROM CARGO
SELECT * FROM FORMAÇÃO_ESCOLAR
SELECT * FROM FUNCIONARIO
SELECT * FROM PROJETO
SELECT * FROM TRABALHA_EM

SELECT NOM_FUNC,VAL_SALARIO FROM FUNCIONARIO

SELECT * FROM FUNCIONARIO WHERE VAL_SALARIO >=2000;

SELECT * FROM FUNCIONARIO WHERE VAL_SALARIO >=2000 ORDER BY VAL_SALARIO;
SELECT * FROM FUNCIONARIO WHERE VAL_SALARIO <=2000 ORDER BY VAL_SALARIO;

SELECT * FROM FUNCIONARIO WHERE VAL_SALARIO >=2000 ORDER BY VAL_SALARIO DESC;
SELECT * FROM FUNCIONARIO WHERE VAL_SALARIO <=2000 ORDER BY VAL_SALARIO DESC;

SELECT * FROM FUNCIONARIO WHERE VAL_SALARIO >=1700 AND VAL_SALARIO <=2300 ORDER BY VAL_SALARIO DESC;
SELECT NOM_FUNC,VAL_SALARIO FROM FUNCIONARIO WHERE VAL_SALARIO >=1700 AND VAL_SALARIO <=2300 ORDER BY VAL_SALARIO DESC;


-- COMANDO DELETE -- PARA REMOVER LINHAS -- TRUNCATE TABLE

DELETE FROM PROJETO WHERE COD_PROJETO=8;
TRUNCATE TABLE FUNCIONARIO --- DELETA A TABELA FUNCIONARIO SE ELA N TIVER UM ATRIBUTO FK. OBS:(COMANDO NÃO PERMITE VOLTAR A TABELA CUIDADO !!!).

-- COMANDO UPDATE  -- PERMITE ATUALIZAR O VALOR DE UMA COLUNA -- 

UPDATE FUNCIONARIO SET VAL_SALARIO =3000.00 WHERE COD_FUNC=1;
UPDATE CARGO SET NOM_CARGO ='DESENVOLVEDOR WEB' WHERE COD_CARGO=4;

-- COMANDO BEGIN TRANSACTION -- COMMIT -- ROLLBACK-- PERMITE ALTERAR DADOS SEM SALVAR NO BD_RH

BEGIN TRANSACTION 
UPDATE FUNCIONARIO SET VAL_SALARIO =2500.00 WHERE COD_FUNC=3;

COMMIT --- PARA CONFIRMAR.
ROLLBACK --- PARA CANCELAR.


--- COMANDO DISTINCT --- SERVE PARA VALORES REPETIDOS DE UMA COLUNA ---

SELECT DISTINCT COD_CARGO FROM FUNCIONARIO; --- RETIRA OS VALORES REPETIDOS NESSE CASO NÃO TEM.
SELECT COD_CARGO FROM FUNCIONARIO;

--- COMANDO BETWEEN --- SERVE PARA DEFINIR INTERVALOS ENTRE VALORES ---

SELECT * FROM FUNCIONARIO WHERE VAL_SALARIO BETWEEN 1500 AND 3000 ORDER BY VAL_SALARIO DESC; -- VALORES ENTRE 1500 A 3000 EM ORDEM DECRESCENTE. --

--- COMANDO IS NULL e IS NOT NULL ---

SELECT * FROM FUNCIONARIO WHERE COD_FUNC IS NOT NULL; --- RECEUPERA VALORES QUE NÃO SÃO DO TIPO NULL.
SELECT * FROM FUNCIONARIO WHERE COD_FUNC IS NULL;    --- RECUPERA VALORES DO TIPO NULL.


--- COMANDO IN e NOT IN --- in=ou --

SELECT * FROM FUNCIONARIO WHERE COD_CARGO IN (1,2,3,6); --- RETORNA SO OS VALORES ONDE O CODIGO DO CARGO SEJA 1,2,3,6.
SELECT * FROM FUNCIONARIO WHERE COD_CARGO NOT IN (2,4); --- RETORNA SO OS VALORES ONDE O CODIGO DO CARGO NÃO SEJA 2,4.
SELECT * FROM FUNCIONARIO WHERE COD_CARGO IN(SELECT COD_CARGO FROM CARGO WHERE NOM_CARGO = 'PROGRAMADOR'); -- RECUPERA O VALOR DO CODIGO DO CARGO DA TABELA FUNCIONARIO, ONDE COMO REQUERIMENTO NOME DO CARGO DA TABELA CARGO SEJA IGUAL A ( PROGRAMADOR ).

--- COMANDO LIKE --- COMANDO USADO PARA RETORNA VALORES CHAVES DO TIPO INSTRING.

SELECT * FROM CARGO WHERE NOM_CARGO LIKE '%DEV%';  --- RETORNOU TODOS NOMES DE CARGO DA TABELA CARGO ONDE TEM A INSTRING CORINGA ( DEV ).% serve para indicar onde começa e onde termina.


--- ! FUNÇOES DE AGREGAÇÃO ! ---- SUM , COUNT , AVG , MAX, MIN ---


-- SUM = SOMA VALORES
-- COUNT = CONTA QUANTIDADE DE LINHAS 
-- AVG = CALCULA MÉDIA 
-- MAX E MIN = MAX MAIOR VALOR , MIN MENOR VALOR.
-- AS = SERVE PARA CRIAR UM NOME PARA A COLUNA.

SELECT SUM(VAL_SALARIO) FROM FUNCIONARIO;   --- SOMA DE TODOS SALARIOS DA TABELA FUNCIONARIO.
SELECT COUNT(*) FROM FUNCIONARIO;           ---  CONTA A QUANTIDADE DE LINHAS DA TABELA FUNCIONARIO.
SELECT AVG(VAL_SALARIO) FROM FUNCIONARIO;   --- CALCULA A MEDIA DOS SALARIOS DA TABELA FUNCIONARIO.
SELECT MAX(VAL_SALARIO) FROM FUNCIONARIO;   --- RECUPERA O MAIOR SALARIO.
SELECT MIN(VAL_SALARIO) FROM FUNCIONARIO;   --- RECUPERA O MENOR SALARIO.
SELECT SUM(VAL_SALARIO), COUNT(*), AVG(VAL_SALARIO), MAX(VAL_SALARIO), MIN(VAL_SALARIO) FROM FUNCIONARIO WHERE VAL_SALARIO >1300; -- ESSA FUNÇÃO SOMA,CONTA,CALCULA MEDIA, RECUPERA VALOR MAXIMO E MINIMO, COSIDERANDO APENAS SALARIOS MAIORES QUE 1300. u.u
SELECT SUM(VAL_SALARIO) AS SOMA, COUNT(*)AS QTD_DE_LINHA, AVG(VAL_SALARIO)AS MEDIA, MAX(VAL_SALARIO)AS MAXIMO, MIN(VAL_SALARIO) AS MINIMO FROM FUNCIONARIO WHERE VAL_SALARIO >1300; -- COMANDO AS CRIOU UM NOME PARA CADA COLUNA.U.U


--- COMANDO UNION  ---- FAZ A JUNÇÃO ENTRE DOIS SELECT

SELECT 'TOTAL DE PROGRAMADORES', COUNT(*) FROM CARGO WHERE NOM_CARGO='PROGRAMADOR' -- CONTA A QUANTIDADE DE PROGRAMADORES.
UNION                                                                                 -- FAZ A JUNÇÃO DAS DUAS TABELAS.
SELECT 'TOTAL DE DESENVOLVEDOR WEB', COUNT(*) FROM CARGO WHERE NOM_CARGO='DESENVOLVEDOR WEB' -- CONTA A QUANTIDADE DE DESENVOLVEDORES WEB.

--- COMANDO GROUP BY --- SERVE PARA AGRUPAR TODOS OS VALORES DE UMA COLUNA E SEPARALOS 

SELECT NOM_CARGO, COUNT(*) AS TOTAL FROM CARGO GROUP BY NOM_CARGO ---COMANDO FAZ A JUNÇÃO DE TODOS OS CARGOS E CONTA QUANTAS PESSOAS ESTAO NESSE CARGO. .,.,.,.,


--- COMANDO HAVING --- SERVE PARA CRIAR UM CRITERIO DE ACEITAÇÃO PARA GROUP BY

SELECT NOM_CARGO, COUNT(*) AS TOTAL, AVG(VAL_SALARIO_BASE) AS MEDIA_DE_SALARIO FROM CARGO GROUP BY NOM_CARGO HAVING AVG(VAL_SALARIO_BASE) > 2000  --- CRIOU UMA TABELA ONDE MOSTRA TODOS OS CARGOS A QUANTIDADE DE PESSOAS NESSES CARGOS E A MEDIA DE SALARIO DE ACORDO COM O CARGO. ALEM DE MOSTRAR APENAS AQUELAS MEDIA Q SEJA SUPERIOR A 2000. COMANDO HAVING.

--- PAROU 50 MINUTOS DE VIDEO ---